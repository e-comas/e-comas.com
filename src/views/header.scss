@use "sass:math";
@use "../utils/variables" as *;

$nav-width: 600px;
$logo-width: 200px;
$breakpoint: $nav-width + $logo-width + 20px;

$hamburgerThickness: 2px;

.background-wrapper {
  position: relative;
}
.background {
  &,
  & * {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    object-fit: cover;
    z-index: -1;
  }
}


a.skip-nav {
  @extend %button;

  position: absolute;
  transform: translateY(-120%);
  left: 0.5rem;
  border-radius: 0 0 $border-radius $border-radius;
  transition: transform 300ms ease-in;

  &:focus {
    transform: none;
  }

  @media screen and (min-width: #{$max-width}) {
    top: calc((#{$max-width} - 100vw) / 2);
  }
  @media screen and (min-width: #{$max-width + 2*$body-padding}) {
    top: -$body-padding;
  }
}

.padding {
  height: 1vh;
  $min-height: 100px;
  min-height: $min-height;
  $max-height: 720px;
  max-height: $max-height;
  gap: 1rem 3rem;
}

.header-container {
  position: fixed;
  background-color: rgb(101,214,190); /* Replace with your specific color */
  z-index: 1;
  width: 100%;
}

header {
  display: flex;
  justify-content: space-between; 
  @media screen and (min-width: $breakpoint) {
    grid-template-columns: 1fr minmax(auto, $nav-width);
  }
  grid-template-rows: auto 1fr;
  padding: 1rem;
  gap: 1rem 3rem;

  height: 1vh;
  $min-height: 100px;
  min-height: $min-height;
  $max-height: 720px;
  max-height: $max-height;
  width: 100%;
  max-width: $body-max-width;
  margin:auto;

  @media screen and (max-height: #{2*$min-height}) and (max-aspect-ratio: 85/100),
    screen and (min-height: #{2*$max-height}) and (max-width: 1290px),
    screen and (min-height: #{2*$min-height + 1}) and (max-height: #{2*$max-height - 1}) and (max-aspect-ratio: 297/324) {
      .background * {
      object-position: left;
    }
  }

  .logo {
    position: relative;

    z-index: 20;
    width: $logo-width;
    min-width: math.div($logo-width, 2);
    max-width: 50vw;
    filter: brightness(0) invert(1);
  }

  nav {
    display: flex;
    justify-content: center;
    gap: 1rem;

    a {
      margin:  1rem;
      @extend %uppercase;
      display: block;
      color: $white;
      text-decoration: none;
      font-size: large;
    }

    @media screen and (min-width: $breakpoint) {
      justify-content: space-between;
      gap: unset;
      align-items: center;

      a:hover,
      a:not(:last-child).active {
        color: $gold;
      }
    }
    ul {
      display: none;
      position: absolute;
      z-index: 1;
      list-style: none;
      flex-direction: column;
      gap: 1em;
      padding: 1em 0;
      margin: 0;
    }
    & > div:hover {
      @media screen and (min-width: $breakpoint) {
        z-index: 1;
        & + ::before {
          content: "";
          display: block;
          position: absolute;
          top: 0;
          bottom: 0;
          right: 0;
          left: 0;
          background-color: $semiTransparentBlack;
          animation: fadeIn $animationDuration;
        }
        > ul {
          display: flex;
        }
      }
    }
    // & > :last-child {
    //   @extend %button;
    //   &:hover {
    //     @extend %invertedCta;
    //   }
    // }
  }
  .contact-button {
    @extend %button;
    &:hover {
      @extend %invertedCta;
    }
  }

  details {
    display: none;

    @media screen and (max-width: #{$breakpoint - 1px}) {
      display: unset;
      z-index: 20;
      position: relative;

      & + nav,
      %hamburger {
        transition: transform $animationDuration;
        transform-origin: right;
      }

      summary {
        @extend %hamburger;

        position: absolute;
        top: 50%;
        right: 0;
        transform: translateY(-50%);

        display: flex;
        flex-direction: column;
        justify-content: space-evenly;
        height: 1rem;
        width: 1rem;

        cursor: pointer;

        border-top: $hamburgerThickness solid $white;

        list-style: none;
        &::-webkit-details-marker {
          display: none;
        }
        &::before,
        &::after {
          @extend %hamburger;
          content: "";
          border-bottom: $hamburgerThickness solid $white;
          width: 100%;
          height: $hamburgerThickness;
        }
        &::before {
          transform: translateY(-0.5px);
          transition-property: opacity, transform;
        }
      }

      &[open] > summary {
        transform: translateY(-50%) rotate(-45deg);
        transform-origin: right;
        &::before {
          opacity: 0;
          transform: rotate(45deg)
            translate(-#{$hamburgerThickness}, #{$hamburgerThickness});
        }
        &::after {
          transform: translateX(-50%) translateY(-3px) rotate(90deg);
          transform-origin: right;
        }
      }

      & + nav {
        position: fixed;
        flex-direction: column;
        padding: 2rem;
        // header padding + logo height + 1rem gap
        padding-top: calc(2rem + 50px + 1rem);
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: $green;
        transform: translateX(100%);
        z-index: 10;

        // To avoid a green flash when resizing the window
        animation: delayAppearance $animationDuration;

        a,
        a:hover,
        a.active {
          color: $grey;
        }
        & > :last-child {
          @include invertedCta();
        }
      }
      &[open] + nav {
        transform: none;
      }
    }
  }

  h1 {
    color: $white;
    max-width: 800px;
    align-self: center;
    // text-align: right;
    transform: translateY(3rem);
    // margin: 0 calc(50% - 400px);
    font-size: 1.3rem;
    line-height: 1.6rem;
    @media screen and (min-width: 800px) {
      font-size: 2rem;
      line-height: 2.5rem;
    }
  }

  @media screen and (min-width: #{$max-width + 100px}) {
    grid-template-columns: auto minmax(auto, #{$max-width - $nav-width}) $nav-width auto;
    column-gap: 0;
  }
}

@keyframes delayAppearance {
  from {
    opacity: 0;
  }
  to {
    opacity: 0;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
